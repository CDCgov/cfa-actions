name: twostep-container-build
description: |
  This action builds a container image in two steps. The first step
  is used to build the dependencies, and the second step is used to
  build the main image. The first step is cached to speed up the
  process. The action is useful when the dependencies are not
  expected to change often, and the main image is expected to change
  frequently.
  
inputs:
  container-file-1:
    description: |
      The first container file to build.
    required: true
  container-file-2: 
    description: |
      The second container file to build.
    required: true
  first-step-cache-key:
    description: |
      The key used to cache the first step of the process. Usually
      generated using the `hashFiles` function.
  image:
    description: |
      The image to build. For instance, cfa-prod-batch, or cdcgov/cfa-actions.
    required: true
  username:
    description: |
      The username to use for the container registry login.
    required: true
  password:
    description: |
      The password to use for the container registry login.
    required: true
  registry:
    description: |
      The registry to use for the container registry login
      with trailing slash. For example, ghcr.io/,
      cfaprodbatchcr.azurecr.io/, etc.
    required: true
  main-branch-name:
    description: |
      The name of the repository's base branch. Defaults to main.
    required: false
    default: 'main'
  main-branch-tag:
    description: |
      The tag to use for the main branch. For instance, latest.
    required: false
    default: 'latest'
  push-image-1:
    description: |
      Whether to push the first image. For instance, true.
    required: false
    default: 'true'
  push-image-2:
    description: |
      Whether to push the second image. For instance, true.
    required: false
    default: 'true'
  build-args-1:
    description: |
      The build arguments to use for the first image.
    required: false
  build-args-2:
    description: |
      The build arguments to use for the second image.
    required: false
  build-labels-1:
    description: |
      The labels to use for the first image.
    required: false
  build-labels-2:
    description: |
      The labels to use for the second image.
    required: false
outputs:
  tag:
    description: |
      The tag to used for the image.
    value: ${{ steps.image-tag.outputs.tag }}
  branch:
    description: |
      The branch name.
    value: ${{ steps.branch-name.outputs.branch }}

runs:
  using: 'composite'

  steps:

    - name: Dumping github context information
      shell: bash
      run: |
        echo "${{ toJson(github) }}" || echo "Failed to dump context info"

    - name: Checking out the latest (may be merge if PR)
      uses: actions/checkout@v4

    # From: https://stackoverflow.com/a/58035262/2097171
    - name: Extract branch name
      shell: bash
      run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      id: branch-name

    #########################################################################
    # Getting the tag
    # The tag will be used for both the docker image and the batch pool
    #########################################################################
    - name: Figure out tag (either latest if it is main or the branch name)
      shell: bash
      id: image-tag
      run: |
        if [ "${{ steps.branch-name.outputs.branch }}" = "${{ inputs.main-branch-name }}" ]; then
          echo "tag=${{ inputs.main-branch-tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ steps.branch-name.outputs.branch }}" >> $GITHUB_OUTPUT
        fi

    - name: Check cache for base image
      uses: actions/cache@v4
      id: cache
      with:
        key: ${{ inputs.first-step-cache-key }}
        lookup-only: true
        path:
          ${{ inputs.container-file-1 }}

    - name: Login to the Container Registry
      if: inputs.registry != ''
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Build and push
      if: steps.cache.outputs.cache-hit != 'true'
      uses: docker/build-push-action@v6
      with:
        no-cache: true
        push: ${{ inputs.push-image-1 }}
        tags: |
          ${{ inputs.registry }}${{ inputs.image }}:dependencies-${{ steps.image-tag.outputs.tag }}
        file: ${{ inputs.container-file-1 }}
        build-args: ${{ inputs.build-args-1 }}
        labels: |
          ${{ inputs.build-labels-1 }}
          TWO_STEP_BUILD_CACHE_HASH=${{ inputs.first-step-cache-key }}


    - name: Build and push the main image
      id: build_and_push_model_image
      uses: docker/build-push-action@v6
      with:
        no-cache: true
        push: ${{ inputs.push-image-2 }}
        tags: |
          ${{ inputs.registry }}${{ inputs.image }}:${{ steps.image-tag.outputs.tag }}
        file: ${{ inputs.container-file-2 }}
        build-args: |
          ${{ inputs.build-args-2 }}
          TAG=dependencies-${{ steps.image-tag.outputs.tag }}
        labels: |
          ${{ inputs.build-labels-2 }}
          TWO_STEP_BUILD_CACHE_HASH=${{ inputs.first-step-cache-key }}