name: post-artifact
description: |
  Posts a comment on a PR linking to an artifact uploaded in CI for easy access and reference.
  Subsequent runs will update the comment with an updated link to the artifact.
inputs:
  artifact-name:
    description: |
      Name of the artifact to which to link (should match the one passed to
      `actions/upload-artifact`).
    required: false
    default: 'artifact'
  message:
    description: |
       Message template to be posted in the PR, as Github-flavored 
       Markdown (GFM). Use the placeholder `{ artifact-url }` to 
       reference the URL of the uploaded artifact, either raw 
       or as GFM formatted link. Use the `{ artifact-name }` 
       placeholder to include the artifact name in the message.
    required: false
    default: 'Thank you for your contribution @${{ github.actor }} :rocket:! Your { artifact-name } is ready for download :point_right: [here]({ artifact-url }) :point_left:!'
  python:
    description: |
      The path to the Python executable. This input is optional and
      defaults to 'python'.
    required: false
    default: 'python'
  gh-token:
    description: |
      The GitHub token to use for the API calls. 
    required: true
runs:
  using: 'composite'

  steps:

    - name: Getting the context information
      shell: bash
      run: |
        echo "::group::GitHub context"
        echo "github.*"
        echo "action              : ${{ github.action }}"
        echo "action_path         : ${{ github.action_path }}"
        echo "action_ref          : ${{ github.action_ref }}"
        echo "action_repository   : ${{ github.action_repository }}"
        echo "action_status       : ${{ github.action_status }}"
        echo "actor               : ${{ github.actor }}"
        echo "actor_id            : ${{ github.actor_id }}"
        echo "base_ref            : ${{ github.base_ref }}"
        echo "env                 : ${{ github.env }}"
        echo "event_name          : ${{ github.event_name }}"
        echo "event_path          : ${{ github.event_path }}"
        echo "graphql_url         : ${{ github.graphql_url }}"
        echo "head_ref            : ${{ github.head_ref }}"
        echo "job                 : ${{ github.job }}"
        echo "path                : ${{ github.path }}"
        echo "ref                 : ${{ github.ref }}"
        echo "ref_name            : ${{ github.ref_name }}"
        echo "ref_protected       : ${{ github.ref_protected }}"
        echo "ref_type            : ${{ github.ref_type }}"
        echo "repository          : ${{ github.repository }}"
        echo "repository_id       : ${{ github.repository_id }}"
        echo "repository_owner    : ${{ github.repository_owner }}"
        echo "repository_owner_id : ${{ github.repository_owner_id }}"
        echo "repositoryUrl       : ${{ github.repositoryUrl }}"
        echo "retention_days      : ${{ github.retention_days }}"
        echo "run_id              : ${{ github.run_id }}"
        echo "run_number          : ${{ github.run_number }}"
        echo "run_attempt         : ${{ github.run_attempt }}"
        echo "secret_source       : ${{ github.secret_source }}"
        echo "::endgroup::"

    - name: Check this is a PR
      if: ${{ github.event_name != 'pull_request' }}
      run: 
        echo "This action must only run in pull requests."
        echo "See https://github.com/CDCgov/cfa-actions for more information."
        exit 1
      shell: bash

    # https://docs.github.com/en/rest/actions/artifacts?apiVersion=2022-11-28#list-workflow-run-artifacts
    - name: "Get list of available artifacts and store as .json"
      run: |
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts > _artifacts-${{ github.sha }}.json
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}

    - name: Fetch metadata for the target artifact
      run: ${{ inputs.python }} ${GITHUB_ACTION_PATH}/scripts/fetch-artifact-meta.py
      shell: bash
      env:
        ARTIFACT_NAME: ${{ inputs.artifact-name }}
        SHA: ${{ github.sha }}

    - name: Get artifact id
      id: artifact-meta
      run: |
        echo "id=$(cat '${{ github.sha }}_artifact_id')" >> $GITHUB_OUTPUT
        echo "expires_at=$(cat '${{ github.sha }}_artifact_expires_at')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Compose message
      run: ${{ inputs.python }} ${GITHUB_ACTION_PATH}/scripts/compose-msg.py
      shell: bash
      env:
        ARTIFACT_NAME: ${{ inputs.artifact-name }}
        MESSAGE: ${{ inputs.message }}
        SERVER_URL: ${{ github.server_url }}
        REPOSITORY: ${{ github.repository }}
        RUN_ID: ${{ github.run_id }}
        ARTIFACT_ID: ${{ steps.artifact-meta.outputs.id }}
        SHA: ${{ github.sha }}
        EXP_DATE: ${{ steps.artifact-meta.outputs.expires_at }}
        
    - name: Get the event
      run: |
        gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          repos/${{ github.repository }}/issues/${{ github.event.number }}/comments > _events-${{ github.sha }}.json
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}

    - name: Find the comment
      run: ${{ inputs.python }} ${GITHUB_ACTION_PATH}/scripts/find-comment.py
      shell: bash
      env:
        SHA: ${{ github.sha }}
        ARTIFACT_NAME: ${{ inputs.artifact-name }}

    - name: Putting the contents of _msg.txt into an environment var
      id: set-env
      run: |
        echo "ID=$(cat _ID-${{ github.sha }})" >> $GITHUB_OUTPUT
        echo "FOUND=$(cat _ID-${{ github.sha }}_found)" >> $GITHUB_OUTPUT
      shell: bash

    # See:
    # https://docs.github.com/en/rest/issues/comments?apiVersion=2022-11-28#update-an-issue-comment
    - name: Add comment
      if: ${{ steps.set-env.outputs.FOUND == 'false' }}
      run: |
        echo "No comment from github-bot found, adding a new one."
        gh pr comment -R ${{ github.repository }} \
          ${{ github.event.number }} -F msg-${{ github.sha }}.txt
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
    
    - name: Update comment
      if: ${{ steps.set-env.outputs.FOUND == 'true' }}
      run: |
        echo "Editing original comment id: ${{ steps.set-env.outputs.ID }}."
        gh api \
          --method PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          repos/${{ github.repository }}/issues/comments/${{ steps.set-env.outputs.ID }} \
          -F 'body=@msg-${{ github.sha }}.txt'
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.gh-token }}
